import { GeneratorOptions, generatorHandler } from "@prisma/generator-helper";

import { GENERATOR_NAME } from "./constants";
import { appendFileSafely } from "./utils/fs-opts";
import fs from "fs-extra";
import { genProtoEnum } from "./helpers/genProtoEnum";
import { genProtoModel } from "./helpers/genProtoModel";
import { logger } from "@prisma/sdk";
import path from "path";

// import { writeFileSafely } from './utils/writeFileSafely'

const { version } = require("../package.json");

generatorHandler({
  onManifest() {
    logger.info(`${GENERATOR_NAME}:Registered`);
    return {
      version,
      defaultOutput: "../generated",
      prettyName: GENERATOR_NAME,
    };
  },
  onGenerate: async (options: GeneratorOptions) => {
    const writeLocation = path.join(options.generator.output?.value!, `generated.proto`);

    fs.removeSync(writeLocation);

    await appendFileSafely(
      writeLocation,
      `/**
  Generated by ${GENERATOR_NAME} v${version}
  Copied from 'packages/database/generated/proto' 
*/`
    );

    await appendFileSafely(writeLocation, `syntax = "proto3";`);

    if (options.dmmf.datamodel.models.length) {
      options.dmmf.datamodel.models.forEach(async (modelInfo) => {
        const protoModel = genProtoModel(modelInfo);

        await appendFileSafely(writeLocation, protoModel);
      });
    }

    if (options.dmmf.datamodel.enums.length) {
      options.dmmf.datamodel.enums.forEach(async (enumInfo) => {
        const protoEnum = genProtoEnum(enumInfo);

        await appendFileSafely(writeLocation, protoEnum);
      });
    }
  },
});
